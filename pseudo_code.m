% State and measurement sizes
pose_size = 3;
lmk_size = 2;

%
num_poses = 3;
num_lmks = 4;

torad = pi/180;

% matlab no deixa tenir index 0, per aixo fem 1+ 0
%
factor{1+ 0} = struct(...
    'type' , 'pose', ...
    'measurement' , [0;0;0],...
    'covariance', 1e-3*eye(3,3),...
    'index' , 0);

factor{1+ 1} = struct(...
    'type' , 'motion', ...
    'measurement' , [1.0;0.0;-torad*5],...
    'covariance', diag([1e-2, 1e-2, (torad*2)^2]),...
    'index' , [0,1]);

factor{1+ 2} = struct(...
    'type' , 'motion', ...
    'measurement' , [1.05;-0.05;-torad*3],...
    'covariance', diag([1e-2, 1e-2, (torad*2)^2]),...
    'index' , [1,2]);

factor{1+ 3} = struct(...
    'type' , 'lmk', ...
    'measurement' , [1.2;torad*40],...
    'covariance', diag([1e-2, (torad*10)^2]),...
    'index' , [0,3]);

factor{1+ 4} = struct(...
    'type' , 'lmk', ...
    'measurement' , [0.8;torad*90],...
    'covariance', diag([1e-2, (torad*10)^2]),...
    'index' , [1;3]);

factor{1+ 5} = struct(...
    'type' , 'lmk', ...
    'measurement' , [1.4;torad*20],...
    'covariance', diag([1e-2, (torad*10)^2]),...
    'index' , [1;4]);

factor{1+ 6} = struct(...
    'type' , 'lmk', ...
    'measurement' , [1.6;torad*40],...
    'covariance', diag([1e-2, (torad*10)^2]),...
    'index' , [0;5]);

factor{1+ 7} = struct(...
    'type' , 'lmk', ...
    'measurement' , [1;-torad*85],...
    'covariance', diag([1e-2, (torad*10)^2]),...
    'index' , [1;5]);

factor{1+ 8} = struct(...
    'type' , 'lmk', ...
    'measurement' , [3;-torad*15],...
    'covariance', diag([1e-2, (torad*10)^2]),...
    'index' , [0;6]);

factor{1+ 9} = struct(...
    'type' , 'lmk', ...
    'measurement' , [2;-torad*45],...
    'covariance', diag([1e-2, (torad*10)^2]),...
    'index' , [1;6]);

factor{1+ 10} = struct(...
    'type' , 'lmk', ...
    'measurement' , [1;-torad*60],...
    'covariance', diag([1e-2, (torad*10)^2]),...
    'index' , [2;6]);

states{1+ 0} = struct(...
    'type', 'pose', ...
    'range', [1;2;3],...    %li diem la posicio que ocupa dins del vector
    'value', rand(3,1))

states{1+ 1} = struct(...
    'type', 'pose', ...
    'range', [4;5;6],...    
    'value', rand(3,1))

states{1+ 2} = struct(...
    'type', 'pose', ...
    'range', [7;8;9],...    
    'value', rand(3,1))

states{1+ 3} = struct(...
    'type', 'lmk', ...
    'range', [10;11],...    
    'value', rand(2,1))

states{1+ 4} = struct(...
    'type', 'lmk', ...
    'range', [12;13],...    
    'value', rand(2,1))

states{1+ 5} = struct(...
    'type', 'lmk', ...
    'range', [14;15],...    
    'value', rand(2,1))

states{1+ 6} = struct(...
    'type', 'lmk', ...
    'range', [16;17],...    
    'value', rand(2,1))

dx = ones(17,1) * 1e6;
eps = 1e-6;

while norm(dx) > eps
    
    [A,r] = buildproblem(states,factor);
    dx = solvelinearized(A,r);
    
    states = updatestates(states,dx);
    
    drawmap(states,factor);
    
end

    
